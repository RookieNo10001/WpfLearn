<Window x:Class="BingdingCommandTest.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:local="clr-namespace:BingdingCommandTest"
        d:DataContext="{d:DesignInstance local:MainViewModel}"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding LoadedCommand}"/>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    
    <Window.Resources>
        <Style x:Key="btnBaseStyle" TargetType="Button">
            <Setter Property="Width" Value="200"/>
            <Setter Property="Height" Value="20"/>
            <Setter Property="Background" Value="LightPink"/>
            <Setter Property="Foreground" Value="SeaGreen"/>
            <Setter Property="Margin" Value="10 10"/>
        </Style>

        <Style x:Key="btnStyle" TargetType="Button" BasedOn="{StaticResource btnBaseStyle}">
            <Setter Property="Content" Value="Awaken"/>
        </Style>

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="ButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" CornerRadius="10" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="local:CustomTextBox">
            <Style.Triggers>
                <Trigger Property="IsHighLight" Value="True">
                    <Setter Property="Foreground" Value="LightBlue"/>
                </Trigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>

    <StackPanel Orientation="Vertical">
        <Button Style="{DynamicResource ButtonStyle1}" Content="btn01"/>
        <TextBox Text="{Binding Name}" Margin="0 10 0 0"/>
        <local:CustomTextBox IsHighLight="True" Text="High"/>
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Style="{StaticResource btnStyle}" Command="{Binding Awakencommand}"/>
            <Button Style="{StaticResource btnStyle}" Content="Cancel" Command="{Binding Cancelcommand}"/>
        </StackPanel>
        <Border BorderBrush="Gray" BorderThickness="1" Width="400">
            <i:Interaction.Behaviors>
                <i:MouseDragElementBehavior/>
                <local:MyBehavior/>
            </i:Interaction.Behaviors>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                <TextBox Name="tbox" MinWidth="100" local:TextBoxHelper.HasTextMoniter="True" Text="{Binding Text}">
                    <i:Interaction.Behaviors>
                        <local:TextBoxMouseWheelBehavior MaxValue="100" MinValue="10" Scale="5"/>
                    </i:Interaction.Behaviors>
                </TextBox>
                <CheckBox Margin="10 0" IsChecked="{Binding ElementName=tbox, Path=(local:TextBoxHelper.HasText),Mode=OneWay}"/>
                <Button Content="Clear">
                    <i:Interaction.Behaviors>
                        <local:ClearTextBehavior Target="{Binding ElementName=tbox}"/>
                    </i:Interaction.Behaviors>
                </Button>
            </StackPanel>
        </Border>

        <Button Content="Close Windows">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Click">
                    <!--<i:CallMethodAction TargetObject="{Binding Source={x:Static Application.Current}}" MethodName="Shutdown"/>-->
                    <i:CallMethodAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType=Window}}" MethodName="Close"/>
                </i:EventTrigger>
                <i:DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsMouseOver}" Value="True">
                    <i:ChangePropertyAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType=Button}}"
                                            PropertyName="Background" Value="Yellow"/>
                </i:DataTrigger>
            </i:Interaction.Triggers>
        </Button>
    </StackPanel>
</Window>
